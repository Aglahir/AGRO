int arr[10];

void merge(int lower, int mid, int upper, int max) {
    int i, j, k;
    i = lower;
    j = mid + 1;
    k = lower;

    while (i <= mid && j <= upper)
    {
        if (arr[i] % max <= arr[j] % max) {
            arr[k] = arr[k] + (arr[i] % max) * max;
            k ++;
            i ++;
        }
        else {
            arr[k] = arr[k] + (arr[j] % max) * max;
            k ++;
            j ++;
        }
    }

    while (i <= mid) {
        arr[k] = arr[k] + (arr[i] % max) * max;
        k ++;
        i ++;
    }

    while (j <= upper) {
        arr[k] = arr[k] + (arr[j] % max) * max;
        k ++;
        j ++;
    }
 
    for (i = lower; i < upper + 1; i++;) {
        arr[i] = arr[i] / max;
    }
}

%% WORKS
void mergeSortRec(int lower, int upper, int max) {
    int mid;
    if (lower < upper) {
        mid = (lower + upper) / 2;
        mergeSortRec(lower, mid, max);
        mergeSortRec(mid + 1, upper, max);
        merge(lower, mid, upper, max);
    }
}

%% WORKS
int getMaxFromArr() {
    int max, i;
    max = arr[0];

    for (i = 1; i < 10; i ++;) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    return max;
}

%% WORKS
void mergeSort(int n) {
    int max;
    max = getMaxFromArr() + 1;
    mergeSortRec(0, n - 1, max);
}

%% WORKS
void populateArr(int n) {
    int i;
    for (i = 0; i < n; i += 2;) {
        arr[i] = 10 - i;
    }

    for (i = 1; i < n; i += 2;) {
        arr[i] = 20 - i;
    }
}

int binarySearch(int lower, int upper, int target) {
    int mid, output;
    mid = (lower + upper) / 2;
    print("upper: ", upper, "  lower: ", lower, "  midVal: ", arr[mid], "\n");
    if (upper >= lower) {

        if (arr[mid] == target) {
            output = mid;
        }
        else {
            if (arr[mid] < target) {
                output = binarySearch(mid + 1, upper, target);
            }
            else {
                output = binarySearch(lower, mid - 1, target);
            }
        }
    }
    else {
        output = (0-1);
    }

    return output;
}

%% WORKS
void printArr(int n) {
    int i;
    for (i = 0; i < n; i ++;) {
        print(arr[i], "\n");
    }
}

main {
    int i, n;
    n = 10;

    populateArr(n);
    printArr(n);

    print("----------", "\n");

    mergeSort(n);
    printArr(n);

    int target, result;
    target = 10;
    result = binarySearch(0, n, target);
    print(target, " exists? (-1 if not) : (", target, " at pos ", result, ")", "\n");

}